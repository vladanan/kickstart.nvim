2024-10-10 07:57:50
nvim d

https://neovim.io/doc/user/vimindex.html

0 to LSP : Neovim RC From Scratch
https://www.youtube.com/watch?v=w7i4amO_zaE

https://betterprogramming.pub/overcoming-vim-phobia-my-journey-of-redemption-d1114e6922ab

https://www.freecodecamp.org/news/vim-key-bindings-reference/

Vim Cheat Sheet
https://vim.rtorr.com/

Don't Use Vim For The Wrong Reasons
https://www.youtube.com/watch?v=YF3PyjQHy10

Don't use Vim
https://gist.github.com/romainl/6b952db7a6138b48657ba0fbb9d65370

What's the best Neovim-setup for Go?
https://www.reddit.com/r/neovim/comments/sn005i/whats_the_best_neovimsetup_for_go/

prvo raspored terminal prozora i nvim-a
zatim text editing i tabs
zatim nalazenje i otvaranje fajlova

beleske:

sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

 ~/.config/nvim/init.vim for Neovim)

    Begin the section with call plug#begin()
    List the plugins with Plug commands
    End the section with call plug#end()

For example,

call plug#begin()

" List your plugins here
Plug 'tpope/vim-sensible'

call plug#end()


Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

-- You dont need to set any of these options. These are the default ones. Only
-- the loading is important
require('telescope').setup {
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')


$ sudo dnf install ripgrep

Plug 'nvim-lua/plenary.nvim'

https://www.reddit.com/r/neovim/comments/zko4tf/difficulty_loading_telescopenvim_lazy_or_eager/

https://github.com/nvim-telescope/telescope.nvim

https://github.com/nvim-lua/kickstart.nvim

~$ go version
go version go1.22.5 linux/amd64

-------------------------

https://github.com/nvim-lua/kickstart.nvim

sudo dnf install -y fd-find

git clone https://github.com/vladanan/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim

~$ go version
go version go1.22.5 linux/amd64


vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv")
vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv")

vim.keymap.set("n", "Q", "<nop>")

local builtin = require('telescope.builtin')
--vim.keymap.set('n', '<leader>ff', function() require('telescope.builtin').find_files() end, {})
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })



vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true

vim.opt.hlsearch = false
vim.opt.incsearch = true

NeoVim Is Better, But Why Devs Are Not Switching To It? | Prime Reacts
https://www.youtube.com/watch?v=5Welk51oDWs

:help start-of-file

:help motion — explains all the movement commands.

:help navigation — broader overview.

:help key-notation — if you're confused by the symbols like <C-w> or <S-CR>.

Use Ctrl-] to jump to a tag/link in help.

Use Ctrl-o to go back in help, like a browser history.

This cycles through the open windows.
    Ctrl + w, then w again

Ctrl-w h → move to the window left

Ctrl-w l → move right

Ctrl-w k → move up

Ctrl-w j → move down


:e file.txt — open new file

:ls — see open files

:b 2 — switch to buffer #2

Ctrl-^ — toggle between two most recent files

Use :sp or :vs for side-by-side editing


-- See `:help telescope.builtin`
local builtin = require 'telescope.builtin'
vim.keymap.set('n', '<leader>ff', vim.cmd.Ex)
vim.keymap.set('n', '<leader>sh', builtin.help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sk', builtin.keymaps, { desc = '[S]earch [K]eymaps' })
vim.keymap.set('n', '<leader>sf', builtin.find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set('n', '<leader>ss', builtin.builtin, { desc = '[S]earch [S]elect Telescope' })
vim.keymap.set('n', '<leader>sw', builtin.grep_string, { desc = '[S]earch current [W]ord' })
vim.keymap.set('n', '<leader>sg', builtin.live_grep, { desc = '[S]earch by [G]rep' })
vim.keymap.set('n', '<leader>sd', builtin.diagnostics, { desc = '[S]earch [D]iagnostics' })
vim.keymap.set('n', '<leader>sr', builtin.resume, { desc = '[S]earch [R]esume' })
vim.keymap.set('n', '<leader>s.', builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })
vim.keymap.set('n', '<leader><leader>', builtin.buffers, { desc = '[ ] Find existing buffers' })


mmmmmmmmmmmmmmmmmmmmdfldsaj f;sajf s;afd as;lfj 
ldkjafs;j ;sfja;slkdfjs;a fsa; fkas;
sl;fakj; skj f;aslf jsa;lf ja;
dfldsaj f;sajf s;afd as;lfj 

https://github.com/xiyaowong/transparent.nvim?tab=readme-ov-file
-- init.lua
require('lazy').setup({
    {
        'xiyaowong/transparent.nvim',
        lazy = false,
        config = function()
          require('transparent').setup({
            -- Optional: Customize transparency settings
            groups = { -- table: groups to make transparent
                'Normal', 'NormalFloat', 'FloatBorder', 'TelescopeBorder', 'TelescopeNormal'
            },
            -- Or, set default groups (see #20)
            default_groups = true,
          })
        end
    },
    -- ... other plugins
})

POKUSAJ DA SE FORK NA GITGUB USKLADI SA ORIGINALNIM REPOOM IAKO OBA IMAJU NOVE COMMIT

https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork
git remote add upstream https://github.com/nvim-lua/kickstart.nvim 

https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line

---

kopiranje yankovanog teksta u telescope find:
Ctrl+r i dobija se spisak registera/bufera sa kopiranim tekstom i ostalim stvarima kao sto je poslednja komanda ili ime fajla u drugom bufferu itd., 0 je poslednji yank

tako da se to moze sa Ctrl+r 0

---

find & replace za ceo projekat tj. sve fajlove u folderu

prvo space sg za live_grep
zatim se upise ono sto se trazi i kada se spisak sredi
Ctrl+q da se ubaci u Quickfix list

Once the results are in the Quickfix list, use the cfdo command to execute a substitution command on each file listed in the Quickfix list.
The command structure is: cfdo %s/<old-string>/<new-string>/g | update | bd

    cfdo: Executes the following command on each file in the Quickfix list.

%s/<old-string>/<new-string>/g: This is the standard Vim substitution command.

    %: Applies the substitution to the entire file.

s: Indicates a substitution.
<old-string>: The string or pattern to find.
<new-string>: The string to replace it with.
g: (Global) Replaces all occurrences within each line.

| update: Saves the changes to the file after the substitution.
| bd: da se pobrisu bafferi da se sistem ne opterecuje jer moze biti mnogo fajlova

mozda ce da javi gresku sa treesiter ali ne obracati paznju i pregledati fajlove

---

nalazenje nvim konfiguracionih fajlova, zgodno za ove beleske i init.lua:

Space tj. leader sn

leader leader daje spisak otvorenih buffera

---

iz telescope se sa Ctrl+v otvara obelezeni fajl kao vertical split


---

u v rezim sa Shift j/k tj. J K red ili blok ide gore dole

---

za pregled greske lsp-a u nvim <leader>ca

---


copiranje fajla u netrw:

prvo se obelezi target folder: ode se na . u vrhu spiska i pritisne mt
zatim se obelezi fajl za kopiranje: ode se na sam fajl i pritisne mf
zatim se uradi kopiranje sa: mc
onda netrw pita za ime novog fajla i kada se upise onda se potvrdi sa y

----

kada se nalazis iznad neke funkcije sa grr se ide na definiciju, referencu, implementaciju

iznad neke promenljive sa: grn se dobija meni da se ta promenljiva preimenuje svuda kao u vsc, ODNOSI SE I NA DRUGE FAJLOVE

---

kada se pritisne slovo neke komande i saceka dobija se meni sa svim opcijama a na kraju koliko jos opcija ima sa dodatnim slovima u komandi
i to vazi za sve komande:

y = copy
d = cut/delete
c = change
g = go

---

:wa save all

. ponavlja poslednju komandu tipa dd i slicno tj. ponavlja sve sto je uradjeno u insert modu

ovo moze da se koristi da se sa find (ili obrnuti find koji se dobija sa shift / tj. ?) menja nesto uzatopno tako sto se nesto nadje sa n i uradi ista promena sa .

---

zz centrira tekst oko aktivnog kursora tako da bude kursor na sredini ekrana

---

0 ide bukvalno na pocetak linije a ^ shift+6 ide na prvo slovo linije

f + slovo ide na to slovo ; ponavlja zadnju potragu a , ponavlja unazad

== poravnjava tekucu liniju sa onom iznad nje

R daje replace mode tako da prepisuje sve redom

diw brise celu rec dok dw brise od pozicije kursora do kraja reci, umesto w moze da bude i " za sve izmedju navodnika ili { za sve izmedju zagrade tj. sve u funkciji ili p za ceo paragraf ili f aktuelni granicnik

isto to vazi i za y tj. vec korisceno yiw itd. a vazi i za a umesto i gde se brise okvir w"{ i oznaka okvira

---

alt+ jklh b cini da se izadje iz insert moda tako da nema potrebe da se radi remaping za esc/caps/jj/jk ctrl+[ itd.

https://vim.fandom.com/wiki/Avoid_the_escape_key
Avoiding the Esc key
If you have an American English keyboard, pressing Ctrl-[ (control plus left square bracket) is equivalent to pressing Esc. This provides an easy way to exit from insert mode.

Use Alt/Meta In a Terminal
Alt keys appear on most PC keyboards. Meta keys were used on some old systems.

If you use Vim in a terminal, simply press alt/meta+normal_mode_key. Most terminals send an escape character followed by the normal_mode_key that you pressed, removing the need to press escape yourself.

The terminals konsole and gnome terminal send the escape by default when you press alt/meta+normal_mode_key.
Thus in insert mode pressing alt+h alt+j alt+k alt+l all take you to normal mode and move in the expected direction. You can hold down alt when moving even while in normal mode since the additional ESC that is sent does no harm.

The advantage of using this scheme is that you can use the alt/meta+key combination with any normal mode key, e.g.

Alt+o opens a new line below the one you are currently editing,
Alt+A appends to the end of the current line,
Alt+p pastes at the current insert location.
Alt+k moves up
Thus using vim via a terminal gives you these short cut powers on any stock standard system without the need to edit each systems vim mappings.

---

only delete not copy with d etc and cut with Ctrl + x ?

https://vi.stackexchange.com/questions/25474/stop-the-normal-mode-delete-commands-from-copying-text
https://stackoverflow.com/questions/11993851/how-to-delete-not-cut-in-vim

:reg dobija se spisag registara, isto se dobija i sa "
na "* je register iz spoljnih aplikacija, "0 je yanked, "" je default tj. zadnji koriscen

Use the "black hole register", "_ to really delete something: "_d.
ova komanda ne kopira nista u neki register

na ovaj nacin se izbegavaju remapiranja a osim toga se sa svakim remapiranjem gubi funkcija necega drugog

primer remapiranja:
For Neovim users, add that to your init.lua:
-- Prevent deleting from also copying
vim.keymap.set({'n', 'v'}, 'd', '"_d', { noremap = true })
vim.keymap.set('n', 'dd', '"_dd', { noremap = true })

---

gj = ^ (first character on line jer g0 ide na pocetak linije isto kao i 0)

vim.keymap.set({ 'n', 'v' }, 'gj', '^', { desc = 'Go to first character on line' })

---

ovo preskacem za sada da vidim da li mogu da ostanem na :

Space + ;  =  : (command mode)
avoiding irritations from accidental use of CapsLock: 
CapsLock = : (command mode)?
CapsLock + CapsLock = CapsLock?

---


gj - move cursor down (multi-line text)
gk - move cursor up (multi-line text) 

---

ovo je kao ctrl+f5 na kate i na notepad
This appends the current date and time after the cursor (in <> notation <>).

:map <F2> a<C-R>=strftime("%c")<CR><Esc>

-- iz nekog komplikovanog razloga nvim vidi F5 kao F5 ali Ctrl+F5 vidi kao F29:
-- https://github.com/neovim/neovim/issues/7384
-- %c daje lokalni datum tj. sa cirilicom pa sam nasao da za c/c++ funkciju strftime bolji izgled daju (%F %T)

a<C-R>=strftime("%F %T")<CR><Esc>

a: This stands for "append" mode. It allows you to enter insert mode after the current character under the cursor.

<C-R>: This is a Vim control sequence for Ctrl+R. When pressed in insert mode, it allows you to insert the output of an expression or command.

=: This means you're going to evaluate an expression or command.

strftime("%F %T"): This is the command being evaluated. strftime is a Vim function that returns the current date and time in a specific format:

  %F corresponds to the date in the format YYYY-MM-DD.

  %T corresponds to the time in the format HH:MM:SS.

<CR>: This simulates pressing Enter (Carriage Return). It executes the command and returns the result to insert mode.

<Esc>: After executing the command, the <Esc> escapes insert mode and returns you to normal mode.

---

The Vi editor was originally written on an ADM-3A terminal, which had the Escape key positioned where the Tab key occurs on most modern keyboards. 

