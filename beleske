2024-10-10 07:57:50

nvim d

https://neovim.io/doc/user/vimindex.html

0 to LSP : Neovim RC From Scratch
https://www.youtube.com/watch?v=w7i4amO_zaE

https://betterprogramming.pub/overcoming-vim-phobia-my-journey-of-redemption-d1114e6922ab

https://www.freecodecamp.org/news/vim-key-bindings-reference/

Vim Cheat Sheet
https://vim.rtorr.com/

Don't Use Vim For The Wrong Reasons
https://www.youtube.com/watch?v=YF3PyjQHy10

Don't use Vim
https://gist.github.com/romainl/6b952db7a6138b48657ba0fbb9d65370

What's the best Neovim-setup for Go?
https://www.reddit.com/r/neovim/comments/sn005i/whats_the_best_neovimsetup_for_go/

prvo raspored terminal prozora i nvim-a
zatim text editing i tabs
zatim nalazenje i otvaranje fajlova

beleske:

sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

 ~/.config/nvim/init.vim for Neovim)

    Begin the section with call plug#begin()
    List the plugins with Plug commands
    End the section with call plug#end()

For example,

call plug#begin()

" List your plugins here
Plug 'tpope/vim-sensible'

call plug#end()


Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

-- You dont need to set any of these options. These are the default ones. Only
-- the loading is important
require('telescope').setup {
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')


$ sudo dnf install ripgrep

Plug 'nvim-lua/plenary.nvim'

https://www.reddit.com/r/neovim/comments/zko4tf/difficulty_loading_telescopenvim_lazy_or_eager/

https://github.com/nvim-telescope/telescope.nvim

https://github.com/nvim-lua/kickstart.nvim

~$ go version
go version go1.22.5 linux/amd64

-------------------------

https://github.com/nvim-lua/kickstart.nvim

sudo dnf install -y fd-find

git clone https://github.com/vladanan/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim

~$ go version
go version go1.22.5 linux/amd64


vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv")
vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv")

vim.keymap.set("n", "Q", "<nop>")

local builtin = require('telescope.builtin')
--vim.keymap.set('n', '<leader>ff', function() require('telescope.builtin').find_files() end, {})
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })



vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true

vim.opt.hlsearch = false
vim.opt.incsearch = true

NeoVim Is Better, But Why Devs Are Not Switching To It? | Prime Reacts
https://www.youtube.com/watch?v=5Welk51oDWs

:help start-of-file

:help motion — explains all the movement commands.

:help navigation — broader overview.

:help key-notation — if you're confused by the symbols like <C-w> or <S-CR>.

Use Ctrl-] to jump to a tag/link in help.

Use Ctrl-o to go back in help, like a browser history.

This cycles through the open windows.
    Ctrl + w, then w again

Ctrl-w h → move to the window left

Ctrl-w l → move right

Ctrl-w k → move up

Ctrl-w j → move down


:e file.txt — open new file

:ls — see open files

:b 2 — switch to buffer #2

Ctrl-^ — toggle between two most recent files

Use :sp or :vs for side-by-side editing


-- See `:help telescope.builtin`
local builtin = require 'telescope.builtin'
vim.keymap.set('n', '<leader>ff', vim.cmd.Ex)
vim.keymap.set('n', '<leader>sh', builtin.help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sk', builtin.keymaps, { desc = '[S]earch [K]eymaps' })
vim.keymap.set('n', '<leader>sf', builtin.find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set('n', '<leader>ss', builtin.builtin, { desc = '[S]earch [S]elect Telescope' })
vim.keymap.set('n', '<leader>sw', builtin.grep_string, { desc = '[S]earch current [W]ord' })
vim.keymap.set('n', '<leader>sg', builtin.live_grep, { desc = '[S]earch by [G]rep' })
vim.keymap.set('n', '<leader>sd', builtin.diagnostics, { desc = '[S]earch [D]iagnostics' })
vim.keymap.set('n', '<leader>sr', builtin.resume, { desc = '[S]earch [R]esume' })
vim.keymap.set('n', '<leader>s.', builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })
vim.keymap.set('n', '<leader><leader>', builtin.buffers, { desc = '[ ] Find existing buffers' })


mmmmmmmmmmmmmmmmmmmmdfldsaj f;sajf s;afd as;lfj 
ldkjafs;j ;sfja;slkdfjs;a fsa; fkas;
sl;fakj; skj f;aslf jsa;lf ja;
dfldsaj f;sajf s;afd as;lfj 

https://github.com/xiyaowong/transparent.nvim?tab=readme-ov-file
-- init.lua
require('lazy').setup({
    {
        'xiyaowong/transparent.nvim',
        lazy = false,
        config = function()
          require('transparent').setup({
            -- Optional: Customize transparency settings
            groups = { -- table: groups to make transparent
                'Normal', 'NormalFloat', 'FloatBorder', 'TelescopeBorder', 'TelescopeNormal'
            },
            -- Or, set default groups (see #20)
            default_groups = true,
          })
        end
    },
    -- ... other plugins
})

POKUSAJ DA SE FORK NA GITGUB USKLADI SA ORIGINALNIM REPOOM IAKO OBA IMAJU NOVE COMMIT

https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-repository-for-a-fork
git remote add upstream https://github.com/nvim-lua/kickstart.nvim 

https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line

